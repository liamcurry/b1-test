{"version":3,"sources":["api/rpcTypes.ts","coreTypes.ts","api/getTransaction.ts","api/index.ts","api/getBlock.ts","api/getInfo.ts","serviceWorker.ts","store/action.ts","store/state.ts","store/constants.ts","store/selectors.ts","store/reducer.ts","store/actionCreators.ts","store/saga.ts","store/index.ts","components/ChainPage/ChainFailurePage.tsx","components/FadeIn.tsx","components/ChainPage/ChainLoadingPage.tsx","components/BlockPage/BlockLoadingPage.tsx","components/BlockPage/BlockFailurePage.tsx","components/BlockPage/BlockSuccessPage.tsx","components/BlockPage/index.tsx","components/TruncatedText.tsx","components/Router.tsx","components/ChainPage/Block.tsx","components/ChainPage/ChainSuccessPage.tsx","components/ChainPage/index.tsx","components/HomePage/ChainPreset.tsx","components/HomePage/ChainPresets.tsx","components/HomePage/index.tsx","components/NotFoundPage.tsx","components/App/AppHeader.tsx","components/GlobalStyles.ts","components/App/index.tsx","index.tsx"],"names":["RpcErrorType","ResultType","RemoteDataType","resultOk","data","type","Ok","resultErr","error","Err","getData","remoteData","Success","Loading","Failure","remoteDataDefault","Default","remoteDataLoading","remoteDataSuccess","remoteDataFailure","TransactionType","convertRawTransaction","trx","String","isDeferred","Deferred","id","Standard","contextFreeActions","transaction","context_free_actions","map","action","account","name","actions","getNumActionsInTransaction","length","getBlock","serverUrl","blockNum","signal","a","url","URL","fetch","toString","method","body","JSON","stringify","block_num_or_id","res","BadStatus","status","json","InvalidJson","raw","block_num","producer","timestamp","Date","transactions","UnexpectedData","getNumActionsInBlock","block","reduce","sum","getInfo","rawInfo","chainId","chain_id","headBlockNum","head_block_num","lastIrreversibleBlockNum","last_irreversible_block_num","Boolean","window","location","hostname","match","ActionType","ChainErrorType","ChainEnv","chainPresets","env","Mainnet","defaultHostname","Testnet","lightTheme","filter","preset","bgColor","textColor","linkColor","x","y","darkTheme","defaultTheme","defaultState","rpcHostnameInput","autoplay","chain","theme","getRpcHostnameInput","state","getAutoplay","getChain","getChainData","getChainId","chainData","getRpcUrl","rpcUrl","getBlocks","blocks","getChainPreset","i","chainPreset","getTheme","reducer","IncrementHeadBlockNum","_","onIncrementHeadBlockNum","SetAutoplay","onSetAutoplay","GetInfo","selectors","InvalidUrl","onGetInfo","SetInfo","info","GetInfoError","onSetInfo","GetBlock","key","onGetBlock","SetBlock","onSetBlock","DelBlock","onDelBlock","GetAbi","SetAbi","onSetAbi","SetTheme","onSetTheme","getInfoAction","setInfoAction","getBlockAction","setBlockAction","saga","rpcFlow","cancelGetBlock","select","task","fork","take","cancel","actionChannel","rpcActionChannel","delBlocks","startTime","now","undefined","controller","AbortController","race","call","drop","console","log","abort","endTime","delay","api","result","put","store","sagaMiddleware","createSagaMiddleware","innerStore","createStore","composeWithDevTools","applyMiddleware","run","useDispatch","useDispatchInner","useSelector","selector","equalityFn","useSelectorInner","ChainFailurePage","fadeIn","keyframes","FadeIn","styled","div","ChainLoadingPage","BlockLoadingPage","BlockFailurePage","BlockSuccessPage","BlockPage","params","previousHostname","dispatch","useEffect","parseInt","e","RouteType","TruncatedText","getRouteTemplate","routeType","Home","Chain","Block","Settings","getRouteString","route","Link","to","children","props","Wrapper","WrapperOk","Num","Id","Producer","Timestamp","time","Actions","BlockOk","numActions","toLocaleString","title","toISOString","BlockErr","num","BlockLoading","blockRoute","PageHeader","header","ChainName","h1","Hostname","ChainId","BlocksHeader","ToggleAutoplay","button","Blocks","ChainSuccessPage","useInterval","push","toggleAutoplay","useCallback","onClick","ChainPage","Name","h2","ChainPreset","ChainPresets","presets","HomePage","NotFoundPage","Title","ThemeToggle","AppHeader","input","isDarkTheme","toggleTheme","Bp","GlobalStyles","createGlobalStyle","AppWithTheme","exact","component","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80dfea4d.chunk.js","sourcesContent":["import { Opaque, Result } from '../coreTypes'\r\n\r\n/** Opaque type representing an EOSIO chain ID */\r\nexport type ChainId = Opaque<'ChainId', string>\r\n\r\n/** Opaque type representing an EOSIO block ID */\r\nexport type BlockId = Opaque<'BlockId', string>\r\n\r\n/** Opaque type representing an EOSIO block number */\r\nexport type BlockNum = Opaque<'BlockNum', number>\r\n\r\n/** Opaque type representing an EOSIO transaction ID */\r\nexport type TransactionId = Opaque<'TransactionId', string>\r\n\r\n/** Opaque type representing an EOSIO account name */\r\nexport type AccountName = Opaque<'AccountName', string>\r\n\r\n/** Opaque type representing an EOSIO action name */\r\nexport type ActionName = Opaque<'ActionName', string>\r\n\r\nexport type RpcResult<T> = Result<T, RpcError>\r\n\r\nexport interface RawError {\r\n  readonly code: number\r\n  readonly error: Readonly<{\r\n    readonly code: number;\r\n    readonly details: ReadonlyArray<{\r\n      readonly file: Readonly<string>;\r\n      readonly line_number: Readonly<number>;\r\n      readonly message: Readonly<string>;\r\n      readonly method: Readonly<string>;\r\n    }>;\r\n    readonly name: Readonly<string>;\r\n    readonly what: Readonly<string>;\r\n  }>\r\n  readonly message: Readonly<string>\r\n}\r\n\r\nexport function isRawError(data: any): data is RawError {\r\n  // TODO test against json schema\r\n  return data && typeof data === 'object' && 'code' in data && 'error' in data\r\n}\r\n\r\nexport interface RpcError {\r\n  type: RpcErrorType\r\n  raw?: RawError\r\n}\r\n\r\nexport enum RpcErrorType {\r\n  NoCors = 'NO_CORS',\r\n  BadStatus = 'BAD_STATUS',\r\n  InvalidJson = 'INVALID_JSON',\r\n  UnexpectedData = 'UNEXPECTED_DATA',\r\n}\r\n","/**\r\n * A simple wrapper to strengthen basic types\r\n * @see {@link https://codemix.com/opaque-types-in-javascript/}\r\n */\r\nexport type Opaque<K, T> = T & { readonly __TYPE__: K }\r\n\r\nexport type Result<T, E> = ResultOk<T> | ResultErr<E>\r\n\r\nexport enum ResultType {\r\n  Ok = 'OK',\r\n  Err = 'ERR',\r\n}\r\n\r\nexport interface ResultOk<T> {\r\n  readonly type: ResultType.Ok\r\n  readonly data: T\r\n}\r\n\r\nexport const resultOk = <T>(data: T): ResultOk<T> => ({\r\n  type: ResultType.Ok,\r\n  data,\r\n})\r\n\r\nexport interface ResultErr<E> {\r\n  readonly type: ResultType.Err\r\n  readonly error: E\r\n}\r\n\r\nexport const resultErr = <E>(error: E): ResultErr<E> => ({\r\n  type: ResultType.Err,\r\n  error,\r\n})\r\n\r\n/**\r\n * Represents fallible data fetched from a remote resource.\r\n * @see {@link http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html}\r\n */\r\nexport type RemoteData<S, E, L = S> =\r\n  | RemoteDataDefault\r\n  | RemoteDataSuccess<S>\r\n  | RemoteDataFailure<E>\r\n  | RemoteDataLoading<L>\r\n\r\n/** Remote data union type tag */\r\nexport enum RemoteDataType {\r\n  Default = 'DEFAULT',\r\n  Loading = 'LOADING',\r\n  Success = 'SUCCESS',\r\n  Failure = 'FAILURE',\r\n}\r\n\r\n/** Represents the default state of remote data */\r\nexport interface RemoteDataDefault {\r\n  /** Union type tag */\r\n  readonly type: RemoteDataType.Default\r\n}\r\n\r\n/** Represents the loading state of remote data */\r\nexport interface RemoteDataLoading<L> {\r\n  /** Union type tag */\r\n  readonly type: RemoteDataType.Loading\r\n  /** Optional previously loaded data */\r\n  readonly data?: Readonly<L> | void\r\n}\r\n\r\n/** Represents the successful state of remote data */\r\nexport interface RemoteDataSuccess<S> {\r\n  /** Union type tag */\r\n  readonly type: RemoteDataType.Success\r\n  /** Data that was successfully loaded */\r\n  readonly data: Readonly<S>\r\n}\r\n\r\n/** Represents the failed state of remote data */\r\nexport interface RemoteDataFailure<E> {\r\n  /** Union type tag */\r\n  readonly type: RemoteDataType.Failure\r\n  /** Failure type */\r\n  readonly data: Readonly<E>\r\n}\r\n\r\nexport function getData<S, E, L>(\r\n  remoteData: RemoteData<S, E, L>,\r\n): S | L | E | void {\r\n  switch (remoteData.type) {\r\n  case RemoteDataType.Success:\r\n  case RemoteDataType.Loading:\r\n  case RemoteDataType.Failure:\r\n    return remoteData.data\r\n  }\r\n}\r\n\r\n/** Default remote data state */\r\nexport const remoteDataDefault: Readonly<RemoteDataDefault> = {\r\n  type: RemoteDataType.Default,\r\n}\r\n\r\n/** Creates remote data a loading state */\r\nexport const remoteDataLoading = <L, E>(\r\n  data?: L | void,\r\n): Readonly<RemoteDataLoading<L>> => ({\r\n  type: RemoteDataType.Loading,\r\n  data,\r\n})\r\n\r\n/** Creates remote data a successful state */\r\nexport const remoteDataSuccess = <S>(\r\n  data: Readonly<S>,\r\n): Readonly<RemoteDataSuccess<S>> => ({\r\n  type: RemoteDataType.Success,\r\n  data,\r\n})\r\n\r\n/** Creates remote data a failed state */\r\nexport const remoteDataFailure = <E>(\r\n  data: Readonly<E>,\r\n): Readonly<RemoteDataFailure<E>> => ({\r\n  type: RemoteDataType.Failure,\r\n  data,\r\n})\r\n\r\nexport function resultToRemoteData<T, E>(\r\n  result: Result<T, E>,\r\n): RemoteData<T, E> {\r\n  switch (result.type) {\r\n  case ResultType.Ok:\r\n    return remoteDataSuccess(result.data)\r\n  case ResultType.Err:\r\n    return remoteDataFailure(result.error)\r\n  }\r\n}\r\n","import { AccountName, ActionName, TransactionId } from './rpcTypes'\r\n\r\n/** Minimal transaction data needed for our application */\r\nexport type Transaction = StandardTransaction | DeferredTransaction\r\n\r\n/** Transaction union type tag */\r\nexport enum TransactionType {\r\n  Standard = 'STANDARD',\r\n  Deferred = 'DEFERRED',\r\n}\r\n\r\n/** Minimal standard transaction data needed for our application */\r\nexport interface StandardTransaction {\r\n  /** Union type tag */\r\n  readonly type: TransactionType.Standard\r\n  /** Context-free actions included in this transaction */\r\n  readonly contextFreeActions: ReadonlyArray<Action>\r\n  /** Non-context-free actions included in this transaction */\r\n  readonly actions: ReadonlyArray<Action>\r\n}\r\n\r\n/** Minimal action data needed for our application */\r\nexport interface Action {\r\n  /** Smart contract account name */\r\n  readonly account: AccountName\r\n  /** Smart contract action name */\r\n  readonly name: ActionName\r\n}\r\n\r\n/** Minimal deferred transaction data needed for our application */\r\nexport interface DeferredTransaction {\r\n  /** Union type tag */\r\n  readonly type: TransactionType.Deferred\r\n  /** ID of the deferred transaction */\r\n  readonly id: TransactionId\r\n}\r\n\r\n/** Partial raw transaction data returned from `/v1/chain/get_block` endpoint */\r\nexport interface RawTransaction {\r\n  readonly trx: TransactionId | Readonly<RawTrx>\r\n}\r\n\r\nexport interface RawTrx {\r\n  readonly transaction: RawTransactionInner\r\n}\r\n\r\n/** Partial raw inner transaction data returned from `/v1/chain/get_block` endpoint */\r\nexport interface RawTransactionInner {\r\n  /** Context-free actions included in this transaction */\r\n  readonly context_free_actions: ReadonlyArray<RawAction>\r\n  /** Non-context-free actions included in this transaction */\r\n  readonly actions: ReadonlyArray<RawAction>\r\n}\r\n\r\n/** Partial raw action data returned from `/v1/chain/get_block` endpoint */\r\nexport interface RawAction {\r\n  /** Smart contract account name */\r\n  readonly account: AccountName\r\n  /** Smart contract action name */\r\n  readonly name: ActionName\r\n}\r\n\r\nexport function isDeferred(\r\n  trx: TransactionId | Readonly<RawTrx>,\r\n): trx is TransactionId {\r\n  return typeof trx === 'string' || trx instanceof String\r\n}\r\n\r\nexport function convertRawTransaction({ trx }: RawTransaction): Transaction {\r\n  if (isDeferred(trx)) {\r\n    return {\r\n      type: TransactionType.Deferred,\r\n      id: trx,\r\n    }\r\n  } else {\r\n    return {\r\n      type: TransactionType.Standard,\r\n      contextFreeActions: trx.transaction.context_free_actions.map((action) => ({\r\n        account: action.account,\r\n        name: action.name,\r\n      })),\r\n      actions: trx.transaction.actions.map((action) => ({\r\n        account: action.account,\r\n        name: action.name,\r\n      })),\r\n    }\r\n  }\r\n}\r\n\r\nexport function getNumActionsInTransaction(transaction: Transaction): number {\r\n  if (transaction.type === TransactionType.Standard) {\r\n    return transaction.contextFreeActions.length + transaction.actions.length\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n","export * from './getAbi'\r\nexport * from './getBlock'\r\nexport * from './getInfo'\r\nexport * from './getTransaction'\r\nexport * from './rpcTypes'\r\n","import { resultOk, resultErr } from '../coreTypes'\r\nimport {\r\n  BlockId,\r\n  BlockNum,\r\n  AccountName,\r\n  TransactionId,\r\n  ActionName,\r\n  RpcErrorType,\r\n  RpcResult,\r\n  RawError,\r\n} from './rpcTypes'\r\nimport {\r\n  Transaction,\r\n  RawTransaction,\r\n  TransactionType,\r\n  isDeferred,\r\n  convertRawTransaction,\r\n  getNumActionsInTransaction,\r\n} from './getTransaction'\r\n// import { addJsonSchema, validateJsonSchema } from './jsonSchema'\r\n\r\n/** Partial raw data returned from `/v1/chain/get_block` endpoint */\r\nexport interface RawBlock {\r\n  /** Hash of the block */\r\n  readonly id: BlockId\r\n  /** Number of the block */\r\n  readonly block_num: BlockNum\r\n  /** Block producer */\r\n  readonly producer: AccountName\r\n  /** UTC time when the block was produced */\r\n  readonly timestamp: string\r\n  /** Transactions included in this block */\r\n  readonly transactions: ReadonlyArray<RawTransaction>\r\n}\r\n\r\n/** Minimal block data needed for our application */\r\nexport interface Block {\r\n  /** Hash of the block */\r\n  readonly id: BlockId\r\n  /** Number of the block */\r\n  readonly blockNum: BlockNum\r\n  /** Block producer */\r\n  readonly producer: AccountName\r\n  /** UTC time when the block was produced */\r\n  readonly timestamp: Date\r\n  /** Transactions included in this block */\r\n  readonly transactions: ReadonlyArray<Transaction>\r\n}\r\n\r\n// addJsonSchema('RawBlock', {\r\n//   type: 'object',\r\n//   properties: {\r\n//     id: { type: 'string' },\r\n//     block_num: { type: 'integer' },\r\n//     producer: { type: 'string' },\r\n//     timestamp: { type: 'string' },\r\n//   },\r\n//   required: ['id', 'block_num', 'producer', 'timestamp'],\r\n// })\r\n\r\nexport async function getBlock(\r\n  serverUrl: Readonly<URL>,\r\n  blockNum: Readonly<BlockNum>,\r\n  signal?: AbortSignal,\r\n): Promise<RpcResult<Block>> {\r\n  const url = new URL('/v1/chain/get_block', serverUrl)\r\n  // TODO abort controllers\r\n  // TODO make a HEAD call to check for CORS headers\r\n\r\n  let res: Response\r\n  try {\r\n    res = await fetch(url.toString(), {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        block_num_or_id: blockNum,\r\n      }),\r\n      signal,\r\n    })\r\n  } catch (e) {\r\n    return resultErr({ type: RpcErrorType.BadStatus, status: 0 }) // TODO this is wrong\r\n  }\r\n\r\n  let json: any\r\n  try {\r\n    json = await res.json()\r\n  } catch (e) {\r\n    return resultErr({ type: RpcErrorType.InvalidJson })\r\n  }\r\n\r\n  // TODO validate json schema\r\n  const raw = json as RawBlock\r\n\r\n  try {\r\n    return resultOk({\r\n      id: raw.id,\r\n      blockNum: raw.block_num,\r\n      producer: raw.producer,\r\n      timestamp: new Date(`${raw.timestamp}Z`),\r\n      transactions: raw.transactions.map(convertRawTransaction),\r\n    })\r\n  } catch (e) {\r\n    // TODO do this better\r\n    return resultErr({\r\n      type: RpcErrorType.UnexpectedData,\r\n      error: json as RawError,\r\n    })\r\n  }\r\n}\r\n\r\nexport function getNumActionsInBlock(block: Block): number {\r\n  return block.transactions.reduce((sum: number, transaction) => {\r\n    return sum + getNumActionsInTransaction(transaction)\r\n  }, 0)\r\n}\r\n","import { resultOk, resultErr } from '../coreTypes'\r\nimport { RpcResult, ChainId, BlockNum, RpcErrorType } from './rpcTypes'\r\n\r\n/** Partial raw data returned from `/v1/chain/get_info` endpoint */\r\nexport interface RawInfo {\r\n  /** ID of the EOSIO blockchain */\r\n  readonly chain_id: ChainId\r\n  /** Latest block number */\r\n  readonly head_block_num: BlockNum\r\n  /** Latest irreversible block number */\r\n  readonly last_irreversible_block_num: BlockNum\r\n}\r\n\r\n/** Minimal info data needed for our application */\r\nexport interface Info {\r\n  /** ID of the EOSIO blockchain */\r\n  readonly chainId: ChainId\r\n  /** Latest block number */\r\n  readonly headBlockNum: BlockNum\r\n  /** Latest irreversible block number */\r\n  readonly lastIrreversibleBlockNum: BlockNum\r\n}\r\n\r\nexport async function getInfo(serverUrl: URL): Promise<RpcResult<Info>> {\r\n  const url = new URL('/v1/chain/get_info', serverUrl)\r\n\r\n  // TODO abort controllers\r\n  // TODO make a HEAD call to check for CORS headers\r\n\r\n  let res: Response\r\n  try {\r\n    res = await fetch(url.toString())\r\n  } catch (e) {\r\n    return resultErr({ type: RpcErrorType.BadStatus, status: 0 }) // TODO this is wrong\r\n  }\r\n\r\n  let json: any\r\n  try {\r\n    json = await res.json()\r\n  } catch (e) {\r\n    return resultErr({ type: RpcErrorType.InvalidJson })\r\n  }\r\n\r\n  // TODO validate json schema\r\n  const rawInfo = json as RawInfo\r\n\r\n  return resultOk({\r\n    chainId: rawInfo.chain_id,\r\n    headBlockNum: rawInfo.head_block_num,\r\n    lastIrreversibleBlockNum: rawInfo.last_irreversible_block_num,\r\n  })\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import { RpcResult, AccountName, Info, Block, ChainId, BlockNum } from '../api'\r\nimport { Theme } from './state'\r\n\r\nexport type Action =\r\n  | IncrementHeadBlockNumAction\r\n  | SetAutoplayAction\r\n  | GetInfoAction\r\n  | SetInfoAction\r\n  | GetBlockAction\r\n  | SetBlockAction\r\n  | DelBlockAction\r\n  | GetAbiAction\r\n  | SetAbiAction\r\n  | SetThemeAction\r\n\r\nexport enum ActionType {\r\n  IncrementHeadBlockNum = 'INCREMENT_BLOCK_NUM',\r\n  SetAutoplay = 'SET_AUTOPLAY',\r\n  GetInfo = 'GET_INFO',\r\n  SetInfo = 'SET_INFO',\r\n  GetBlock = 'GET_BLOCK',\r\n  SetBlock = 'SET_BLOCK',\r\n  DelBlock = 'DEL_BLOCK',\r\n  GetAbi = 'GET_ABI',\r\n  SetAbi = 'SET_ABI',\r\n  SetTheme = 'SET_THEME',\r\n}\r\n\r\nexport interface IncrementHeadBlockNumAction {\r\n  readonly type: ActionType.IncrementHeadBlockNum\r\n}\r\n\r\nexport interface SetAutoplayAction {\r\n  readonly type: ActionType.SetAutoplay\r\n  readonly autoplay: boolean\r\n}\r\n\r\nexport interface GetInfoAction {\r\n  readonly type: ActionType.GetInfo\r\n  readonly hostname: string\r\n  readonly chainId?: Readonly<ChainId> | void\r\n}\r\n\r\nexport interface SetInfoAction {\r\n  readonly type: ActionType.SetInfo\r\n  readonly info: Readonly<RpcResult<Info>>\r\n}\r\n\r\nexport interface GetBlockAction {\r\n  readonly type: ActionType.GetBlock\r\n  readonly blockNum: Readonly<BlockNum>\r\n}\r\n\r\nexport interface SetBlockAction {\r\n  readonly type: ActionType.SetBlock\r\n  readonly blockNum: Readonly<BlockNum>\r\n  readonly block: Readonly<RpcResult<Block>>\r\n}\r\n\r\nexport interface DelBlockAction {\r\n  readonly type: ActionType.DelBlock\r\n  readonly blockNum: Readonly<BlockNum>\r\n}\r\n\r\nexport interface GetAbiAction {\r\n  readonly type: ActionType.GetAbi\r\n  readonly account: Readonly<AccountName>\r\n}\r\n\r\nexport interface SetAbiAction {\r\n  readonly type: ActionType.SetAbi\r\n}\r\n\r\nexport interface SetThemeAction {\r\n  readonly type: ActionType.SetTheme\r\n  readonly theme: Readonly<Theme>\r\n}\r\n","import { RpcError, Info, Block, ChainId, BlockNum } from '../api'\r\nimport { RemoteData } from '../coreTypes'\r\n\r\nexport interface State {\r\n  readonly rpcHostnameInput: string\r\n  readonly autoplay: boolean\r\n  readonly chain: Chain\r\n  readonly theme: Theme\r\n}\r\n\r\nexport type Chain = RemoteData<ChainSuccess, ChainError, ChainLoading>\r\n\r\nexport type ChainData = ChainSuccess | ChainError | ChainLoading\r\n\r\nexport interface ChainSuccess {\r\n  readonly rpcUrl: Readonly<URL>\r\n  readonly chainId: Readonly<ChainId>\r\n  readonly headBlockNum: Readonly<BlockNum>\r\n  readonly blocks: {\r\n    readonly [blockNum: number]: Readonly<RemoteData<Block, RpcError>>;\r\n  }\r\n}\r\n\r\nexport interface ChainLoading {\r\n  readonly rpcUrl: Readonly<URL>\r\n  readonly chainId?: Readonly<ChainId> | void\r\n}\r\n\r\nexport enum ChainErrorType {\r\n  InvalidUrl = 'INVALID_URL',\r\n  Unreachable = 'UNREACHABLE',\r\n  GetInfoError = 'GET_INFO_ERROR',\r\n  NoCorsGetInfo = 'NO_CORS_GET_INFO',\r\n  NoCorsGetBlock = 'NO_CORS_GET_BLOCK',\r\n}\r\n\r\nexport interface ChainError {\r\n  readonly type: ChainErrorType\r\n  readonly rpcUrl?: Readonly<URL> | void\r\n  readonly chainId?: Readonly<ChainId> | void\r\n}\r\n\r\nexport interface ChainPreset {\r\n  readonly id: ChainId\r\n  readonly name: string\r\n  readonly env: ChainEnv\r\n  readonly defaultHostname: string\r\n}\r\n\r\nexport enum ChainEnv {\r\n  Mainnet = 'MAINNET',\r\n  Testnet = 'TESTNET',\r\n}\r\n\r\nexport interface Theme {\r\n  readonly bgColor: string\r\n  readonly textColor: string\r\n  readonly linkColor: string\r\n  readonly x: number\r\n  readonly y: number\r\n  // readonly color: {\r\n  //   readonly primary: string\r\n  //   readonly primaryVariant: string\r\n  //   readonly secondary: string\r\n  //   readonly secondaryVariant: string\r\n  //   readonly background: string\r\n  //   readonly surface: string\r\n  //   readonly error: string\r\n  // }\r\n}\r\n","import { ChainId } from '../api'\r\nimport { remoteDataDefault } from '../coreTypes'\r\nimport { State, ChainPreset, ChainEnv, Theme } from './state'\r\n\r\nexport const eosMainnet: Readonly<ChainPreset> = {\r\n  id: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906' as ChainId,\r\n  name: 'EOS Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'api.eosnewyork.io',\r\n}\r\n\r\nexport const telosMainnet: Readonly<ChainPreset> = {\r\n  id: '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11' as ChainId,\r\n  name: 'Telos Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'api.tlos.goodblock.io',\r\n}\r\n\r\nexport const worbliMainnet: Readonly<ChainPreset> = {\r\n  id: '73647cde120091e0a4b85bced2f3cfdb3041e266cbbe95cee59b73235a1b3b6f' as ChainId,\r\n  name: 'Worbli Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'api.worbli.io',\r\n}\r\n\r\nexport const waxMainnet: Readonly<ChainPreset> = {\r\n  id: '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4' as ChainId,\r\n  name: 'WAX Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'wax.greymass.com',\r\n}\r\n\r\nexport const bosMainnet: Readonly<ChainPreset> = {\r\n  id: 'd5a3d18fbb3c084e3b1f3fa98c21014b5f3db536cc15d08f9f6479517c6a3d86' as ChainId,\r\n  name: 'BOS Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'api.bossweden.org',\r\n}\r\n\r\nexport const meetoneMainnet: Readonly<ChainPreset> = {\r\n  id: 'cfe6486a83bad4962f232d48003b1824ab5665c36778141034d75e57b956e422' as ChainId,\r\n  name: 'MEET.ONE Mainnet',\r\n  env: ChainEnv.Mainnet,\r\n  defaultHostname: 'fullnode.meet.one',\r\n}\r\n\r\nexport const jungleTestnet: Readonly<ChainPreset> = {\r\n  id: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473' as ChainId,\r\n  name: 'Jungle Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'api.jungle.alohaeos.com',\r\n}\r\n\r\nexport const kylinTestnet: Readonly<ChainPreset> = {\r\n  id: '5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191' as ChainId,\r\n  name: 'Kylin Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'kylin.eossweden.org',\r\n}\r\n\r\nexport const telosTestnet: Readonly<ChainPreset> = {\r\n  id: '1eaa0824707c8c16bd25145493bf062aecddfeb56c736f6ba6397f3195f33c9f' as ChainId,\r\n  name: 'Telos Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'testnet.eos.miami',\r\n}\r\n\r\nexport const lynxTestnet: Readonly<ChainPreset> = {\r\n  id: '0fea517bbfb5b51c564b5c59bcf7f02cf934cfff895f59d0d5cd7079c06fd978' as ChainId,\r\n  name: 'Lynx Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'lynxtestnet.greymass.com',\r\n}\r\n\r\nexport const bosTestnet: Readonly<ChainPreset> = {\r\n  id: '33cc2426f1b258ef8c798c34c0360b31732ea27a2d7e35a65797850a86d1ba85' as ChainId,\r\n  name: 'BOS Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'bos-test.eospacex.com',\r\n}\r\n\r\nexport const meetoneTestnet: Readonly<ChainPreset> = {\r\n  id: '7136e3e32a458bb99cf6973ab5055869d25830607b9e78593769e1be52fb6f20' as ChainId,\r\n  name: 'MEET.ONE Testnet',\r\n  env: ChainEnv.Testnet,\r\n  defaultHostname: 'sidechain-test-history.meet.one',\r\n}\r\n\r\nexport const chainPresets: ReadonlyArray<ChainPreset> = [\r\n  eosMainnet,\r\n  telosMainnet,\r\n  worbliMainnet,\r\n  waxMainnet,\r\n  bosMainnet,\r\n  meetoneMainnet,\r\n  jungleTestnet,\r\n  kylinTestnet,\r\n  telosTestnet,\r\n  lynxTestnet,\r\n  bosTestnet,\r\n  meetoneTestnet,\r\n]\r\n\r\nexport const mainnets: ReadonlyArray<ChainPreset> = chainPresets.filter(\r\n  (preset) => preset.env === ChainEnv.Mainnet,\r\n)\r\n\r\nexport const testnets: ReadonlyArray<ChainPreset> = chainPresets.filter(\r\n  (preset) => preset.env === ChainEnv.Testnet,\r\n)\r\n\r\nexport const lightTheme: Readonly<Theme> = {\r\n  bgColor: '#ffffff',\r\n  textColor: '#333333',\r\n  linkColor: 'red',\r\n  x: 10,\r\n  y: 10,\r\n}\r\n\r\nexport const darkTheme: Readonly<Theme> = {\r\n  bgColor: '#1f1b24',\r\n  textColor: '#fff',\r\n  linkColor: 'blue',\r\n  x: 10,\r\n  y: 10,\r\n}\r\n\r\nexport const defaultTheme: Readonly<Theme> = lightTheme\r\n\r\nexport const defaultState: Readonly<State> = {\r\n  rpcHostnameInput: '',\r\n  autoplay: true,\r\n  chain: remoteDataDefault,\r\n  theme: defaultTheme,\r\n}\r\n","import { RpcError, Info, Block, ChainId, BlockNum } from '../api'\r\nimport { RemoteData, getData, RemoteDataType } from '../coreTypes'\r\nimport { chainPresets } from './constants'\r\nimport {\r\n  State,\r\n  ChainPreset,\r\n  Theme,\r\n  Chain,\r\n  ChainError,\r\n  ChainData,\r\n} from './state'\r\n\r\nexport function getRpcHostnameInput(state: Readonly<State>): Readonly<string> {\r\n  return state.rpcHostnameInput\r\n}\r\n\r\nexport function getAutoplay(state: Readonly<State>): boolean {\r\n  return state.autoplay\r\n}\r\n\r\nexport function getChain(state: Readonly<State>): Readonly<Chain> {\r\n  return state.chain\r\n}\r\n\r\nexport function getChainData(\r\n  state: Readonly<State>,\r\n): Readonly<ChainData> | void {\r\n  const chain = getChain(state)\r\n  if (chain) {\r\n    return getData(chain)\r\n  }\r\n}\r\n\r\nexport function getChainId(state: Readonly<State>): Readonly<ChainId> | void {\r\n  const chainData = getChainData(state)\r\n  if (chainData) {\r\n    return chainData.chainId\r\n  }\r\n}\r\n\r\nexport function getRpcUrl(state: Readonly<State>): Readonly<URL> | void {\r\n  const chainData = getChainData(state)\r\n  if (chainData) {\r\n    return chainData.rpcUrl\r\n  }\r\n}\r\n\r\n// export function getInfo(\r\n//   state: Readonly<State>,\r\n// ): Readonly<RemoteData<Info, RpcError>> | void{\r\n//   return state.info\r\n// }\r\n\r\n// export function getInfoData(state: Readonly<State>): Readonly<Info> | void {\r\n//   const info = getInfo(state)\r\n//   if (info) {\r\n//     return getData(info)\r\n//   }\r\n// }\r\n\r\nexport function getBlocks(\r\n  state: Readonly<State>,\r\n): Readonly<{\r\n  readonly [blockNum: number]: RemoteData<Block, RpcError>;\r\n}> | void {\r\n  const chain = getChain(state)\r\n  if (chain.type === RemoteDataType.Success) {\r\n    return chain.data.blocks\r\n  }\r\n}\r\n\r\nexport function getBlock(\r\n  state: Readonly<State>,\r\n  blockNum: Readonly<BlockNum>,\r\n): Readonly<RemoteData<Block, RpcError>> | void {\r\n  const blocks = getBlocks(state)\r\n  if (blocks) {\r\n    return blocks[(blockNum as unknown) as number]\r\n  }\r\n}\r\n\r\n// export function getBlockData(\r\n//   state: Readonly<State>,\r\n//   blockNum: Readonly<number>,\r\n// ): Readonly<Block> | void {\r\n//   const block = getBlock(state, blockNum)\r\n//   if (block) {\r\n//     return getData(block)\r\n//   }\r\n// }\r\n\r\n// export function getHasBlock(\r\n//   state: Readonly<State>,\r\n//   blockNum: Readonly<number>,\r\n// ): Readonly<boolean> {\r\n//   return !!getBlock(state, blockNum)\r\n// }\r\n\r\n// export function getBlockCount(state: Readonly<State>): Readonly<number> {\r\n//   return Object.keys(state.blocks).length\r\n// }\r\n\r\nexport function getChainPreset(\r\n  state: Readonly<State>,\r\n): Readonly<ChainPreset> | void {\r\n  const chainId = getChainId(state)\r\n  if (chainId) {\r\n    for (let i = chainPresets.length; i--; ) {\r\n      const chainPreset = chainPresets[i]\r\n      if (chainPreset.id === chainId) {\r\n        return chainPreset\r\n      }\r\n    }\r\n  } else {\r\n    const hostname = state.rpcHostnameInput\r\n    for (let i = chainPresets.length; i--; ) {\r\n      const chainPreset = chainPresets[i]\r\n      if (chainPreset.defaultHostname === hostname) {\r\n        return chainPreset\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getTheme(state: Readonly<State>): Readonly<Theme> {\r\n  return state.theme\r\n}\r\n","import {\r\n  RemoteData,\r\n  RemoteDataType,\r\n  remoteDataLoading,\r\n  remoteDataSuccess,\r\n  getData,\r\n  ResultType,\r\n  remoteDataFailure,\r\n  remoteDataDefault,\r\n} from '../coreTypes'\r\nimport { RpcError, BlockNum } from '../api'\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  GetInfoAction,\r\n  SetInfoAction,\r\n  GetBlockAction,\r\n  SetBlockAction,\r\n  GetAbiAction,\r\n  SetAbiAction,\r\n  SetThemeAction,\r\n  IncrementHeadBlockNumAction,\r\n  DelBlockAction,\r\n  SetAutoplayAction,\r\n} from './action'\r\nimport * as selectors from './selectors'\r\nimport { defaultState } from './constants'\r\nimport { State, ChainErrorType, ChainError } from './state'\r\n\r\nexport function reducer(\r\n  state: Readonly<State> = defaultState,\r\n  action: Readonly<Action>,\r\n): Readonly<State> {\r\n  switch (action.type) {\r\n  case ActionType.IncrementHeadBlockNum:\r\n    return onIncrementHeadBlockNum(state, action)\r\n  case ActionType.SetAutoplay:\r\n    return onSetAutoplay(state, action)\r\n  case ActionType.GetInfo:\r\n    return onGetInfo(state, action)\r\n  case ActionType.SetInfo:\r\n    return onSetInfo(state, action)\r\n  case ActionType.GetBlock:\r\n    return onGetBlock(state, action)\r\n  case ActionType.SetBlock:\r\n    return onSetBlock(state, action)\r\n  case ActionType.DelBlock:\r\n    return onDelBlock(state, action)\r\n  case ActionType.GetAbi:\r\n    return onGetAbi(state, action)\r\n  case ActionType.SetAbi:\r\n    return onSetAbi(state, action)\r\n  case ActionType.SetTheme:\r\n    return onSetTheme(state, action)\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nfunction onGetInfo(\r\n  state: Readonly<State>,\r\n  { hostname, chainId }: Readonly<GetInfoAction>,\r\n): Readonly<State> {\r\n  // Check if hostname input is the same\r\n  const previousRpcHostname = selectors.getRpcHostnameInput(state)\r\n  if (previousRpcHostname === hostname) {\r\n    return state\r\n  }\r\n\r\n  // Check if the hostname is valid\r\n  let rpcUrl: URL\r\n  try {\r\n    rpcUrl = new URL(`https://${hostname}`)\r\n  } catch (_) {\r\n    return {\r\n      ...state,\r\n      rpcHostnameInput: hostname,\r\n      chain: remoteDataFailure({\r\n        type: ChainErrorType.InvalidUrl,\r\n      }),\r\n    }\r\n  }\r\n\r\n  // Check if the URL is the same\r\n  const previousRpcUrl = selectors.getRpcUrl(state)\r\n  if (previousRpcUrl === rpcUrl) {\r\n    return state\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    rpcHostnameInput: hostname,\r\n    chain: remoteDataLoading({\r\n      rpcUrl,\r\n      chainId,\r\n    }),\r\n  }\r\n}\r\n\r\nfunction onIncrementHeadBlockNum(\r\n  state: Readonly<State>,\r\n  _: Readonly<IncrementHeadBlockNumAction>,\r\n): Readonly<State> {\r\n  if (state.chain.type === RemoteDataType.Success) {\r\n    const lastBlockNum = (state.chain.data.headBlockNum as unknown) as number\r\n    const headBlockNum = (lastBlockNum + 1) as BlockNum\r\n    return {\r\n      ...state,\r\n      chain: remoteDataSuccess({\r\n        ...state.chain.data,\r\n        headBlockNum,\r\n      }),\r\n    }\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n\r\nfunction onSetAutoplay(\r\n  state: Readonly<State>,\r\n  { autoplay }: Readonly<SetAutoplayAction>,\r\n): Readonly<State> {\r\n  return {\r\n    ...state,\r\n    autoplay,\r\n  }\r\n}\r\n\r\nfunction onSetInfo(\r\n  state: Readonly<State>,\r\n  { info }: Readonly<SetInfoAction>,\r\n): Readonly<State> {\r\n  const rpcUrl = selectors.getRpcUrl(state)\r\n  if (!rpcUrl) {\r\n    return state\r\n  }\r\n  switch (info.type) {\r\n  case ResultType.Ok:\r\n    return {\r\n        ...state,\r\n        chain: remoteDataSuccess({\r\n          rpcUrl,\r\n          chainId: info.data.chainId,\r\n          headBlockNum: info.data.headBlockNum,\r\n          blocks: selectors.getBlocks(state) || {},\r\n        }),\r\n      }\r\n  case ResultType.Err:\r\n    return {\r\n        ...state,\r\n        chain: {\r\n          type: RemoteDataType.Failure,\r\n          data: {\r\n            type: ChainErrorType.GetInfoError,\r\n            rpcUrl,\r\n            chainId: selectors.getChainId(state),\r\n          },\r\n        },\r\n      }\r\n  }\r\n}\r\n\r\nfunction onGetBlock(\r\n  state: Readonly<State>,\r\n  { blockNum }: Readonly<GetBlockAction>,\r\n): Readonly<State> {\r\n  const block = selectors.getBlock(state, blockNum) || remoteDataDefault\r\n  if (\r\n    state.chain.type === RemoteDataType.Success &&\r\n    block.type === RemoteDataType.Default\r\n  ) {\r\n    const key = (blockNum as unknown) as number\r\n    return {\r\n      ...state,\r\n      chain: remoteDataSuccess({\r\n        ...state.chain.data,\r\n        blocks: {\r\n          ...state.chain.data.blocks,\r\n          [key]: remoteDataLoading(),\r\n        },\r\n      }),\r\n    }\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n\r\nfunction onSetBlock(\r\n  state: Readonly<State>,\r\n  { blockNum, block }: Readonly<SetBlockAction>,\r\n): Readonly<State> {\r\n  if (state.chain.type === RemoteDataType.Success) {\r\n    const key = (blockNum as unknown) as number\r\n    return {\r\n      ...state,\r\n      chain: remoteDataSuccess({\r\n        ...state.chain.data,\r\n        blocks: {\r\n          ...state.chain.data.blocks,\r\n          [key]:\r\n            block.type === ResultType.Ok\r\n              ? remoteDataSuccess(block.data)\r\n              : remoteDataFailure(block.error),\r\n        },\r\n      }),\r\n    }\r\n  }\r\n  // return {\r\n  //   ...state,\r\n  //   blocks: {\r\n  //     ...state.blocks,\r\n  //     [blockNum]:\r\n  //       block.type === ResultType.Ok\r\n  //         ? remoteDataSuccess(block.data)\r\n  //         : remoteDataFailure(block.error, state.blocks[blockNum]),\r\n  //   },\r\n  // }\r\n  return state\r\n}\r\n\r\nfunction onDelBlock(\r\n  state: Readonly<State>,\r\n  { blockNum }: Readonly<DelBlockAction>,\r\n): Readonly<State> {\r\n  if (state.chain.type === RemoteDataType.Success) {\r\n    const key = (blockNum as unknown) as number\r\n    const blocks = { ...state.chain.data.blocks }\r\n    delete blocks[key]\r\n    return {\r\n      ...state,\r\n      chain: remoteDataSuccess({\r\n        ...state.chain.data,\r\n        blocks,\r\n      }),\r\n    }\r\n  } else {\r\n    return state\r\n  }\r\n}\r\n\r\nfunction onGetAbi(\r\n  state: Readonly<State>,\r\n  action: Readonly<GetAbiAction>,\r\n): Readonly<State> {\r\n  return state\r\n}\r\n\r\nfunction onSetAbi(\r\n  state: Readonly<State>,\r\n  action: Readonly<SetAbiAction>,\r\n): Readonly<State> {\r\n  return state\r\n}\r\n\r\nfunction onSetTheme(\r\n  state: Readonly<State>,\r\n  { theme }: Readonly<SetThemeAction>,\r\n): Readonly<State> {\r\n  return {\r\n    ...state,\r\n    theme,\r\n  }\r\n}\r\n","import { RpcResult, Info, Block, ChainId, BlockNum } from '../api'\r\nimport {\r\n  ActionType,\r\n  IncrementHeadBlockNumAction,\r\n  GetInfoAction,\r\n  SetInfoAction,\r\n  GetBlockAction,\r\n  SetBlockAction,\r\n  DelBlockAction,\r\n  SetAutoplayAction,\r\n  SetThemeAction,\r\n} from './action'\r\nimport { Theme } from './state'\r\n\r\nexport const incrementBlockNumAction = (): Readonly<\r\n  IncrementHeadBlockNumAction\r\n> => ({\r\n  type: ActionType.IncrementHeadBlockNum,\r\n})\r\n\r\nexport const setAutoplayAction = (\r\n  autoplay: boolean,\r\n): Readonly<SetAutoplayAction> => ({\r\n  type: ActionType.SetAutoplay,\r\n  autoplay,\r\n})\r\n\r\nexport const getInfoAction = (\r\n  hostname: string,\r\n  chainId?: ChainId | void,\r\n): Readonly<GetInfoAction> => ({\r\n  type: ActionType.GetInfo,\r\n  hostname,\r\n  chainId,\r\n})\r\n\r\nexport const setInfoAction = (\r\n  info: Readonly<RpcResult<Info>>,\r\n): Readonly<SetInfoAction> => ({\r\n  type: ActionType.SetInfo,\r\n  info,\r\n})\r\n\r\nexport const getBlockAction = (\r\n  blockNum: Readonly<BlockNum>,\r\n): Readonly<GetBlockAction> => ({\r\n  type: ActionType.GetBlock,\r\n  blockNum,\r\n})\r\n\r\nexport const setBlockAction = (\r\n  blockNum: Readonly<BlockNum>,\r\n  block: Readonly<RpcResult<Block>>,\r\n): Readonly<SetBlockAction> => ({\r\n  type: ActionType.SetBlock,\r\n  blockNum,\r\n  block,\r\n})\r\n\r\nexport const delBlockAction = (\r\n  blockNum: Readonly<BlockNum>,\r\n): Readonly<DelBlockAction> => ({\r\n  type: ActionType.DelBlock,\r\n  blockNum,\r\n})\r\n\r\nexport const setThemeAction = (\r\n  theme: Readonly<Theme>,\r\n): Readonly<SetThemeAction> => ({\r\n  type: ActionType.SetTheme,\r\n  theme,\r\n})\r\n","import {\r\n  delay,\r\n  fork,\r\n  put,\r\n  actionChannel,\r\n  cancel,\r\n  race,\r\n} from 'redux-saga/effects'\r\nimport { call, take, select } from 'typed-redux-saga'\r\nimport * as api from '../api'\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  GetInfoAction,\r\n  GetBlockAction,\r\n  GetAbiAction,\r\n  IncrementHeadBlockNumAction,\r\n  DelBlockAction,\r\n} from './action'\r\nimport { setInfoAction, setBlockAction } from './actionCreators'\r\nimport * as selectors from './selectors'\r\nimport { RemoteDataType } from '../coreTypes'\r\nimport { ChainSuccess } from './state'\r\nimport { BlockNum } from '../api'\r\nimport { Task } from 'redux-saga'\r\n\r\nexport function* saga() {\r\n  while (true) {\r\n    const rpcUrl = yield* select(selectors.getRpcUrl)\r\n    let task: Task | void\r\n    if (rpcUrl) {\r\n      task = yield fork(rpcFlow, rpcUrl)\r\n    }\r\n\r\n    yield* take<GetInfoAction>(ActionType.GetInfo)\r\n    if (task) {\r\n      yield cancel(task)\r\n    }\r\n  }\r\n}\r\n\r\nfunction* rpcFlow(rpcUrl: Readonly<URL>) {\r\n  yield* getInfo(rpcUrl)\r\n  const chain = yield* select(selectors.getChain)\r\n  if (chain.type === RemoteDataType.Success) {\r\n    const rpcActionChannel = yield actionChannel([\r\n      ActionType.GetBlock,\r\n      ActionType.GetAbi,\r\n      ActionType.DelBlock,\r\n    ])\r\n    const delBlocks: { [blockNum: number]: void } = {}\r\n    while (true) {\r\n      const action = yield* take<\r\n        DelBlockAction | GetBlockAction | GetAbiAction\r\n      >(rpcActionChannel)\r\n      const startTime = Date.now()\r\n      switch (action.type) {\r\n      case ActionType.DelBlock:\r\n        delBlocks[(action.blockNum as unknown) as number] = undefined\r\n        continue\r\n      case ActionType.GetBlock:\r\n        const key = (action.blockNum as unknown) as number\r\n        if (key in delBlocks) {\r\n            delete delBlocks[key]\r\n            continue\r\n          }\r\n        const controller = new AbortController()\r\n        const { task, drop } = yield race({\r\n            task: call(getBlock, rpcUrl, action.blockNum, controller.signal),\r\n            drop: call(cancelGetBlock, action.blockNum),\r\n          })\r\n        if (drop) {\r\n            console.log('ABORTED!!!!!!!!!!!!!!!!!!!!!!!')\r\n            controller.abort()\r\n          }\r\n        break\r\n      case ActionType.GetAbi:\r\n          // TODO\r\n        break\r\n      }\r\n      const endTime = Date.now()\r\n      const elapsed = endTime - startTime\r\n      if (elapsed < 300) {\r\n        yield delay(150)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction* getInfo(rpcUrl: Readonly<URL>) {\r\n  const result = yield* call(api.getInfo, rpcUrl)\r\n  yield put(setInfoAction(result))\r\n}\r\n\r\nfunction* getBlock(\r\n  rpcUrl: Readonly<URL>,\r\n  blockNum: Readonly<BlockNum>,\r\n  signal: AbortSignal,\r\n) {\r\n  const result = yield* call(api.getBlock, rpcUrl, blockNum, signal)\r\n  yield put(setBlockAction(blockNum, result))\r\n}\r\n\r\nfunction* cancelGetBlock(blockNum: Readonly<BlockNum>) {\r\n  while (true) {\r\n    const action = yield* take<DelBlockAction>([ActionType.DelBlock])\r\n    if (action.blockNum === blockNum) {\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import { Store, Dispatch, createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {\r\n  useDispatch as useDispatchInner,\r\n  useSelector as useSelectorInner,\r\n} from 'react-redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { Action } from './action'\r\nimport { reducer } from './reducer'\r\nimport { saga } from './saga'\r\nimport { State } from './state'\r\n\r\nexport const store: Store<State, Action> = (() => {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n  const innerStore = createStore(\r\n    reducer,\r\n    composeWithDevTools({ name: 'b1-test' })(applyMiddleware(sagaMiddleware)),\r\n  )\r\n  sagaMiddleware.run(saga)\r\n  return innerStore\r\n})()\r\n\r\nexport function useDispatch(): Dispatch<Action> {\r\n  return useDispatchInner<typeof store.dispatch>()\r\n}\r\n\r\nexport function useSelector<T>(\r\n  selector: (state: State) => T,\r\n  equalityFn?: (left: T, right: T) => boolean,\r\n): T {\r\n  return useSelectorInner(selector, equalityFn)\r\n}\r\n\r\nexport * from './action'\r\nexport * from './actionCreators'\r\nexport * from './constants'\r\nexport * from './selectors'\r\nexport * from './state'\r\n","import React from 'react'\r\nimport * as store from '../../store'\r\n\r\nexport const ChainFailurePage: React.FC<{}> = () => {\r\n  return <>ChainErr</>\r\n}\r\n","import styled, { keyframes } from 'styled-components'\r\n\r\nconst fadeIn = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nexport const FadeIn = styled.div`\r\n  animation: ${fadeIn} 500ms;\r\n`\r\n","import React from 'react'\r\nimport { FadeIn } from '../FadeIn'\r\n\r\nexport const ChainLoadingPage: React.FC = () => {\r\n  return <FadeIn>ChainLoading</FadeIn>\r\n}\r\n","import React from 'react'\r\nimport * as store from '../../store'\r\n\r\nexport const BlockLoadingPage: React.FC<{}> = () => {\r\n  return <>BlockLoading</>\r\n}\r\n","import React from 'react'\r\nimport * as store from '../../store'\r\n\r\nexport const BlockFailurePage: React.FC<{}> = () => {\r\n  return <>BlockFailure</>\r\n}\r\n","import React from 'react'\r\nimport * as api from '../../api'\r\nimport * as store from '../../store'\r\n\r\nexport const BlockSuccessPage: React.FC<{\r\n  readonly chain: Readonly<store.ChainSuccess>;\r\n  readonly block: Readonly<api.Block>;\r\n}> = ({ chain, block }) => {\r\n  return <>BlockSuccess</>\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport * as api from '../../api'\r\nimport * as store from '../../store'\r\nimport { RemoteDataType, remoteDataDefault } from '../../coreTypes'\r\nimport { ChainFailurePage } from '../ChainPage/ChainFailurePage'\r\nimport { ChainLoadingPage } from '../ChainPage/ChainLoadingPage'\r\nimport { BlockLoadingPage } from './BlockLoadingPage'\r\nimport { BlockFailurePage } from './BlockFailurePage'\r\nimport { BlockSuccessPage } from './BlockSuccessPage'\r\n\r\nexport const BlockPage: React.FC<\r\n  RouteComponentProps<{ hostname: string; blockNum: string }>\r\n> = ({ match }) => {\r\n  const hostname = match.params.hostname\r\n  const previousHostname = store.useSelector(store.getRpcHostnameInput)\r\n  const dispatch = store.useDispatch()\r\n  useEffect(() => {\r\n    if (hostname !== previousHostname) {\r\n      dispatch(store.getInfoAction(hostname))\r\n    }\r\n  }, [dispatch, hostname])\r\n\r\n  let blockNum: api.BlockNum | void\r\n  try {\r\n    blockNum = parseInt(match.params.blockNum, 10) as api.BlockNum\r\n  } catch (e) {}\r\n\r\n  const chain = store.useSelector(store.getChain)\r\n  const block =\r\n    store.useSelector((state) =>\r\n      blockNum ? store.getBlock(state, blockNum) : null,\r\n    ) || remoteDataDefault\r\n\r\n  useEffect(() => {\r\n    if (blockNum && chain.type === RemoteDataType.Success) {\r\n      switch (block.type) {\r\n      case RemoteDataType.Default:\r\n      case RemoteDataType.Failure:\r\n        dispatch(store.getBlockAction(blockNum))\r\n      }\r\n    }\r\n  }, [dispatch, hostname, chain, blockNum])\r\n\r\n  if (!blockNum) {\r\n    return <>Invalid block number</>\r\n  }\r\n\r\n  switch (chain.type) {\r\n  case RemoteDataType.Success:\r\n    switch (block.type) {\r\n      case RemoteDataType.Default:\r\n      case RemoteDataType.Loading:\r\n        return <BlockLoadingPage />\r\n      case RemoteDataType.Failure:\r\n        return <BlockFailurePage />\r\n      case RemoteDataType.Success:\r\n        return <BlockSuccessPage chain={chain.data} block={block.data} />\r\n      }\r\n  case RemoteDataType.Loading:\r\n  case RemoteDataType.Default:\r\n    return <ChainLoadingPage />\r\n  case RemoteDataType.Failure:\r\n    return <ChainFailurePage />\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const TruncatedText = styled.div`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n","import React from 'react'\r\nimport {\r\n  Route as RouteInner,\r\n  RouteComponentProps as RouteInnerComponentProps,\r\n  Link as LinkInner,\r\n} from 'react-router-dom'\r\nimport { BlockNum } from '../api'\r\n\r\nexport type RouteParams =\r\n  | HomeRouteParams\r\n  | ChainRouteParams\r\n  | BlockRouteParams\r\n  | SettingsRouteParams\r\n\r\nexport enum RouteType {\r\n  Home = 'HOME',\r\n  Chain = 'CHAIN',\r\n  Block = 'BLOCK',\r\n  Settings = 'SETTINGS',\r\n}\r\n\r\nexport interface HomeRouteParams {\r\n  readonly type: RouteType.Home\r\n}\r\n\r\nexport const homeRoute = (): HomeRouteParams => ({ type: RouteType.Home })\r\n\r\nexport interface ChainRouteParams {\r\n  readonly type: RouteType.Chain\r\n  readonly hostname: string\r\n}\r\n\r\nexport const chainRoute = (hostname: string): ChainRouteParams => ({\r\n  type: RouteType.Chain,\r\n  hostname,\r\n})\r\n\r\nexport interface BlockRouteParams {\r\n  readonly type: RouteType.Block\r\n  readonly hostname: string\r\n  readonly blockNum: Readonly<BlockNum>\r\n}\r\n\r\nexport const blockRoute = (\r\n  hostname: string,\r\n  blockNum: Readonly<BlockNum>,\r\n): BlockRouteParams => ({\r\n  type: RouteType.Block,\r\n  hostname,\r\n  blockNum,\r\n})\r\n\r\nexport interface SettingsRouteParams {\r\n  readonly type: RouteType.Settings\r\n}\r\n\r\nexport const settingsRoute = (): SettingsRouteParams => ({\r\n  type: RouteType.Settings,\r\n})\r\n\r\nexport function getRouteTemplate(routeType: RouteType): string {\r\n  switch (routeType) {\r\n  case RouteType.Home:\r\n    return '/'\r\n  case RouteType.Chain:\r\n    return '/:hostname'\r\n  case RouteType.Block:\r\n    return '/:hostname/:blockNum'\r\n  case RouteType.Settings:\r\n    return '/settings'\r\n  }\r\n}\r\n\r\nexport function getRouteString(route: RouteParams): string {\r\n  switch (route.type) {\r\n  case RouteType.Home:\r\n    return '/'\r\n  case RouteType.Chain:\r\n    return `/${route.hostname}`\r\n  case RouteType.Block:\r\n    return `/${route.hostname}/${route.blockNum}`\r\n  case RouteType.Settings:\r\n    return '/settings'\r\n  }\r\n}\r\n\r\nexport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nexport const Link: React.FC<{\r\n  readonly to: Readonly<RouteParams>;\r\n  readonly className?: string;\r\n}> = ({ to, children, ...props }) => (\r\n  <LinkInner to={getRouteString(to)} {...props}>\r\n    {children}\r\n  </LinkInner>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport * as api from '../../api'\r\nimport * as store from '../../store'\r\nimport { remoteDataDefault, RemoteDataType } from '../../coreTypes'\r\nimport { TruncatedText } from '../TruncatedText'\r\nimport { Link, blockRoute, BlockRouteParams } from '../Router'\r\n\r\nconst Wrapper = styled(Link)`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"num id id\"\r\n    \"timestamp timestamp actions\";\r\n  grid-gap: 10px;\r\n  justify-content: align-start;\r\n  transition: 300ms opacity;\r\n  height: 50px;\r\n  padding: 10px 20px;\r\n`\r\n\r\nconst WrapperOk = styled(Wrapper)``\r\n\r\nconst Num = styled.div`\r\n  grid-area: num;\r\n  font-weight: bold;\r\n`\r\n\r\nconst Id = styled(TruncatedText)`\r\n  grid-area: id;\r\n  font-size: 14px;\r\n`\r\n\r\nconst Producer = styled.div`\r\n  grid-area: producer;\r\n  display: none;\r\n`\r\n\r\nconst Timestamp = styled.time`\r\n  grid-area: timestamp;\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  grid-area: actions;\r\n  text-align: right;\r\n  font-size: 14px;\r\n\r\n  &::after {\r\n    content: \" actions\";\r\n  }\r\n`\r\n\r\nconst BlockOk: React.FC<{\r\n  readonly block: Readonly<api.Block>;\r\n  readonly route: Readonly<BlockRouteParams>;\r\n}> = ({ block, route }) => {\r\n  const numActions = api.getNumActionsInBlock(block)\r\n  return (\r\n    <WrapperOk to={route}>\r\n      <Num>{block.blockNum.toLocaleString()}</Num>\r\n      <Id>{block.id}</Id>\r\n      <Producer>{block.producer}</Producer>\r\n      <Timestamp title='asdf'>{block.timestamp.toISOString()}</Timestamp>\r\n      <Actions>{numActions}</Actions>\r\n    </WrapperOk>\r\n  )\r\n}\r\n\r\nconst BlockErr: React.FC<{\r\n  readonly num: Readonly<api.BlockNum>;\r\n  readonly error: Readonly<api.RpcError>;\r\n  readonly route: Readonly<BlockRouteParams>;\r\n}> = ({ num, error, route }) => {\r\n  return (\r\n    <Wrapper to={route}>\r\n      <Num>{num.toLocaleString()}</Num>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst BlockLoading: React.FC<{\r\n  readonly num: Readonly<api.BlockNum>;\r\n  readonly route: Readonly<BlockRouteParams>;\r\n}> = ({ num, route }) => {\r\n  return (\r\n    <Wrapper to={route}>\r\n      <Num>{num.toLocaleString()}</Num>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport const Block: React.FC<{\r\n  readonly num: Readonly<api.BlockNum>;\r\n}> = ({ num }) => {\r\n  const dispatch = store.useDispatch()\r\n  const block =\r\n    store.useSelector((state) => store.getBlock(state, num)) || remoteDataDefault\r\n  const hostname = store.useSelector(store.getRpcHostnameInput)\r\n  const route = blockRoute(hostname, num)\r\n\r\n  useEffect(() => {\r\n    if (block.type === RemoteDataType.Default) {\r\n      dispatch(store.getBlockAction(num))\r\n    }\r\n    return () => {\r\n      dispatch(store.delBlockAction(num))\r\n    }\r\n  }, [dispatch, num])\r\n\r\n  switch (block.type) {\r\n  case RemoteDataType.Success:\r\n    return <BlockOk block={block.data} route={route} />\r\n  case RemoteDataType.Failure:\r\n    return <BlockErr num={num} error={block.data} route={route} />\r\n  case RemoteDataType.Default:\r\n  case RemoteDataType.Loading:\r\n    return <BlockLoading num={num} route={route} />\r\n  }\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport useInterval from '@use-it/interval'\r\nimport styled from 'styled-components'\r\nimport * as api from '../../api'\r\nimport * as store from '../../store'\r\nimport { Block } from './Block'\r\nimport { TruncatedText } from '../TruncatedText'\r\nimport { FadeIn } from '../FadeIn'\r\n\r\nconst Wrapper = styled(FadeIn)``\r\n\r\nconst PageHeader = styled.header`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"chainName\"\r\n    \"hostName\"\r\n    \"chainId\"\r\n    \"autoplay\";\r\n  padding: 20px 20px 10px;\r\n`\r\n\r\nconst ChainName = styled.h1`\r\n  grid-area: chainName;\r\n  font-size: 18px;\r\n  margin: 0;\r\n`\r\n\r\nconst Hostname = styled.div`\r\n  grid-area: hostName;\r\n  font-size: 14px;\r\n`\r\n\r\nconst ChainId = styled(TruncatedText)`\r\n  grid-area: chainId;\r\n  font-size: 14px;\r\n  opacity: 0.75;\r\n`\r\n\r\nconst BlocksHeader = styled.header`\r\n  display: grid;\r\n  grid-template-areas: \"autoplay\";\r\n  padding: 10px 20px;\r\n`\r\n\r\nconst ToggleAutoplay = styled.button`\r\n  grid-area: autoplay;\r\n`\r\n\r\nconst Blocks = styled.div``\r\n\r\nexport const ChainSuccessPage: React.FC<{\r\n  readonly chain: Readonly<store.ChainSuccess>;\r\n}> = ({ chain }) => {\r\n  const dispatch = store.useDispatch()\r\n  const autoplay = store.useSelector(store.getAutoplay)\r\n  const hostname = store.useSelector(store.getRpcHostnameInput)\r\n  const preset = store.useSelector(store.getChainPreset)\r\n  const blockNum = (chain.headBlockNum as unknown) as number\r\n\r\n  useInterval(\r\n    () => {\r\n      dispatch(store.incrementBlockNumAction())\r\n    },\r\n    autoplay ? 500 : null,\r\n  )\r\n\r\n  const blocks = []\r\n  for (let i = 0; i < 10; i++) {\r\n    const num = (blockNum - i) as api.BlockNum\r\n    blocks.push(<Block key={num} num={num} />)\r\n  }\r\n\r\n  const toggleAutoplay = useCallback(() => {\r\n    if (!autoplay) {\r\n      dispatch(store.getInfoAction(hostname))\r\n    }\r\n    dispatch(store.setAutoplayAction(!autoplay))\r\n  }, [dispatch, autoplay, hostname])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <PageHeader>\r\n        <ChainName>{preset ? preset.name : 'Unknown chain'}</ChainName>\r\n        <Hostname>{hostname}</Hostname>\r\n        <ChainId>{chain.chainId}</ChainId>\r\n      </PageHeader>\r\n      <BlocksHeader>\r\n        <ToggleAutoplay onClick={toggleAutoplay}>\r\n          {autoplay ? 'Pause' : 'Play'}\r\n        </ToggleAutoplay>\r\n      </BlocksHeader>\r\n      <Blocks>{blocks}</Blocks>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport * as store from '../../store'\r\nimport { ChainFailurePage } from './ChainFailurePage'\r\nimport { ChainLoadingPage } from './ChainLoadingPage'\r\nimport { ChainSuccessPage } from './ChainSuccessPage'\r\nimport { RemoteDataType } from '../../coreTypes'\r\n\r\nexport const ChainPage: React.FC<RouteComponentProps<{ hostname: string }>> = ({\r\n  match,\r\n}) => {\r\n  const hostname = match.params.hostname\r\n  const previousHostname = store.useSelector(store.getRpcHostnameInput)\r\n  const dispatch = store.useDispatch()\r\n  useEffect(() => {\r\n    if (hostname !== previousHostname) {\r\n      dispatch(store.getInfoAction(hostname))\r\n    }\r\n  }, [dispatch, hostname])\r\n  const chain = store.useSelector(store.getChain)\r\n  switch (chain.type) {\r\n  case RemoteDataType.Success:\r\n    return <ChainSuccessPage chain={chain.data} />\r\n  case RemoteDataType.Failure:\r\n    return <ChainFailurePage />\r\n  case RemoteDataType.Loading:\r\n  case RemoteDataType.Default:\r\n    return <ChainLoadingPage />\r\n  }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport * as store from '../../store'\r\nimport { Link, chainRoute } from '../Router'\r\nimport { TruncatedText } from '../TruncatedText'\r\n\r\nconst Wrapper = styled(Link)`\r\n  border: 1px solid #fff;\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"name\"\r\n    \"hostname\";\r\n  grid-template-columns: 1fr;\r\n  padding: 10px 20px;\r\n  border-bottom: 1px solid #ccc;\r\n`\r\n\r\nconst Name = styled.h2`\r\n  grid-area: name;\r\n  margin: 0;\r\n`\r\n\r\nconst Hostname = styled.div`\r\n  grid-area: hostname;\r\n  text-align: left;\r\n`\r\n\r\nconst Id = styled(TruncatedText)`\r\n  grid-area: id;\r\n  display: none;\r\n`\r\n\r\nexport const ChainPreset: React.FC<{\r\n  readonly preset: Readonly<store.ChainPreset>;\r\n}> = ({ preset }) => {\r\n  return (\r\n    <Wrapper to={chainRoute(preset.defaultHostname)}>\r\n      <Name>{preset.name}</Name>\r\n      <Hostname>{preset.defaultHostname}</Hostname>\r\n      <Id>{preset.id}</Id>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport * as store from '../../store'\r\nimport { ChainPreset } from './ChainPreset'\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid #ccc;\r\n  border-bottom: 0;\r\n  margin: 0 auto 10px;\r\n  max-width: 500px;\r\n`\r\n\r\nexport const ChainPresets: React.FC<{\r\n  readonly presets: ReadonlyArray<store.ChainPreset>;\r\n}> = ({ presets }) => {\r\n  const children = presets.map((preset) => (\r\n    <ChainPreset key={preset.id} preset={preset} />\r\n  ))\r\n  return <Wrapper>{children}</Wrapper>\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport * as store from '../../store'\r\nimport { ChainPresets } from './ChainPresets'\r\nimport { FadeIn } from '../FadeIn'\r\n\r\nconst Wrapper = styled(FadeIn)``\r\n\r\nexport const HomePage: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <ChainPresets presets={store.chainPresets} />\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const NotFoundPage: React.FC = () => {\r\n  return <>Not found</>\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport * as store from '../../store'\r\nimport { Link, homeRoute } from '../Router'\r\n\r\nconst Wrapper = styled.header`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"title theme\"\r\n    \"input input\";\r\n  padding: 10px 20px;\r\n  text-transform: uppercase;\r\n  border-bottom: 1px solid #ccc;\r\n`\r\n\r\nconst Title = styled(Link)`\r\n  grid-area: title;\r\n  align-content: center;\r\n`\r\n\r\nconst ThemeToggle = styled.button`\r\n  grid-area: theme;\r\n`\r\n\r\nconst UrlInput = styled.input`\r\n  grid-area: input;\r\n  text-align: center;\r\n  padding: 10px;\r\n`\r\n\r\nexport const AppHeader: React.FC = () => {\r\n  const rpcHostnameInput = store.useSelector(store.getRpcHostnameInput)\r\n  const dispatch = store.useDispatch()\r\n  const theme = store.useSelector(store.getTheme)\r\n  const isDarkTheme = theme === store.darkTheme\r\n  const toggleTheme = useCallback(() => {\r\n    const newTheme = isDarkTheme ? store.lightTheme : store.darkTheme\r\n    dispatch(store.setThemeAction(newTheme))\r\n  }, [dispatch, isDarkTheme])\r\n  return (\r\n    <Wrapper>\r\n      <Title to={homeRoute()}>b1 dev test</Title>\r\n      <ThemeToggle onClick={toggleTheme}>\r\n        {isDarkTheme ? 'Light theme' : 'Dark theme'}\r\n      </ThemeToggle>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import 'normalize.css'\r\nimport { createGlobalStyle, ThemeProps, keyframes } from 'styled-components'\r\nimport { Theme } from '../store'\r\n\r\nexport const GlobalStyles = createGlobalStyle<ThemeProps<Theme>>`\r\nbody {\r\n  background-color: ${({ theme }) => theme.bgColor};\r\n  color: ${({ theme }) => theme.textColor};\r\n  font-family: \"Share Tech Mono\", monospace;\r\n}\r\n\r\na {\r\n  color: ${({ theme }) => theme.linkColor};\r\n  text-decoration: none;\r\n}\r\n\r\nbutton {\r\n  border-radius: 3px;\r\n  border: 0;\r\n  background-color: ${({ theme }) => theme.linkColor};\r\n  padding: 10px;\r\n}\r\n`\r\n\r\n// Breakpoint\r\nexport enum Bp {\r\n  Xs = 'XS',\r\n  Sm = 'SM',\r\n  Md = 'MD',\r\n  Lg = 'LG',\r\n  Xl = 'XL',\r\n}\r\n\r\nexport function getMinWidth(bp: Bp): number {\r\n  switch (bp) {\r\n  case Bp.Xs:\r\n    return 0\r\n  case Bp.Sm:\r\n    return 576\r\n  case Bp.Md:\r\n    return 768\r\n  case Bp.Lg:\r\n    return 992\r\n  case Bp.Xl:\r\n    return 1200\r\n  }\r\n}\r\n\r\nexport function minWidth(bp: Bp): string {\r\n  const width = getMinWidth(bp)\r\n  return `(min-width: ${width})`\r\n}\r\n","import React from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from 'react-redux'\nimport { store, useSelector, getTheme } from '../../store'\nimport { BlockPage } from '../BlockPage'\nimport { ChainPage } from '../ChainPage'\nimport { HomePage } from '../HomePage'\nimport { NotFoundPage } from '../NotFoundPage'\nimport { Router, Switch, Route, RouteType, getRouteTemplate } from '../Router'\nimport { AppHeader } from './AppHeader'\nimport { GlobalStyles } from '../GlobalStyles'\n\nconst AppWithTheme: React.FC = () => {\n  const theme = useSelector(getTheme)\n  return (\n    <ThemeProvider theme={theme}>\n      <>\n        <AppHeader />\n        <Switch>\n          <Route\n            exact={true}\n            component={BlockPage}\n            path={getRouteTemplate(RouteType.Block)}\n          />\n          <Route\n            exact={true}\n            component={HomePage}\n            path={getRouteTemplate(RouteType.Home)}\n          />\n          <Route\n            exact={true}\n            component={ChainPage}\n            path={getRouteTemplate(RouteType.Chain)}\n          />\n          <Route component={NotFoundPage} />\n        </Switch>\n        <GlobalStyles />\n      </>\n    </ThemeProvider>\n  )\n}\n\nexport const App: React.FC = () => (\n  <Provider store={store}>\n    <Router>\n      <AppWithTheme />\n    </Router>\n  </Provider>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { App } from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}